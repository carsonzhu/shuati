题目：
请实现一个算法，确定一个字符串的所有字符是否全都不同。这里我们要求不允许使用额外的存储结构。
给定一个string iniString，请返回一个bool值,True代表所有字符全都不同，False代表存在相同的字符。保证字符串中的字符为ASCII字符。字符串的长度小于等于3000。
测试样例：
"aeiou"
返回：True
"BarackObama"
返回：False

解答：
1）哈希法 首先char类型判断重复，用hash数组最方便，只需要256个bool类型即可，O(n)的时间（其实只要判断前257个就行了O(1)，抽屉原理），但是题目要求不能使用额外的存储结构，那么这个方法KO掉。
2）遍历 那么只能用两层for循环遍历，时间复杂度为O(n*n)，但是根据抽屉原理，没必要遍历到N，只需要遍历到前257就够了，如果N<257就遍历到N，所以时间复杂度其实为O(1)!!!
3）排序 既然题目要求不能使用额外空间，而参数列表没有const或引用，那么就可以对字符串排序，然后再判断，需要O（nlogn)排序，然后再遍历一遍O(n)。其实也没必要全都排序，只需前257个，同抽屉原理。

代码：
4）Parition 基于快速排序的partition，可以边排序边找重复 ，也即是每次partition之后，判断中间key元素与两边元素是否相同，相同则返回false，不同再进行下一轮partition.时间复杂度也是O(nlongn)，但要比排序速度快。

代码：
class Different {  
bool quick_check(string &str,int low,int high){
        int first = low,last = high;
        char key = str[first];
        if (low>=high)
            return true;
        while(first<last){
            while(first <last && str[last] >= key)
                last--;           
            str[first] = str[last];
            while(first<last && str[first] <= key)
                first++;
            str[last] = str[first];
        }
        str[first] = key;
        if (first>low && str[first] == str[first-1])
            return false;
        if (first<high && str[first] == str[first+1])
            return false;
        return quick_check(str,low,first-1) && quick_check(str,first+1,high);
    }
public:
    bool checkDifferent(string iniString) {
        // write code here
        return quick_check(iniString,0,iniString.size()-1);
    }
};


5.正则表达式

“(.)”表示一个捕获组，“\\1”表示一个反向引用，也就是说“\\1”与“(.)”这两个位置的值可以相同，其他位置都是".*",表示匹配0~n个任意字符。总的来说，这个正则表达式是匹配出现重复字符的字符串。
代码：
public boolean checkDifferent(String iniString) {   
return !iniString.matches(".*(.)(.*\\1).*");
}

