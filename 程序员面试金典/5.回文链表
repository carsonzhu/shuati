5.回文链表
描述：
请编写一个函数，检查链表是否为回文。
给定一个链表ListNode* pHead，请返回一个bool，代表链表是否为回文。
测试样例：
{1,2,3,2,1}
返回：true
{1,2,3,2,3}
返回：false


代码：
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
class Palindrome {
public:
    bool isPalindrome(ListNode* pHead) {
         //利用快慢指针，找到中间节点。将慢指针的值压入栈中，到达中间节点后，
         //进行出栈操作与后续慢指针的值比较。注意奇偶情况
        if(pHead == nullptr)
            return false;
        
        ListNode *fast = pHead;
        ListNode *slow = pHead;
        stack<int> stack;
        while(fast != nullptr && fast->next != nullptr){
            stack.push(slow->val);
            slow = slow->next;
            fast = fast->next->next;
        }
        if(fast != nullptr)//奇数情况下,慢指针后移一个
            slow = slow->next;
        while(slow != nullptr){
            if(slow->val != stack.top())
                return false;
            stack.pop();
            slow = slow->next;
        }
        return true;
    }
};

其他解法：
把链表的数据域全部放入一个vector中，然后判断vector中的数是不是回文，就可以用普通的方法判断是不是回文
class Palindrome {
public:
    bool isPalindrome(ListNode* pHead) {
        // write code here
        //方式一：借助vector辅助存储空间
        /*
        ListNode *cur=pHead;
        vector<int> ans;
        while(cur){
            ans.push_back(cur->val);
            cur=cur->next;
        }
        reverse(ans.begin(),ans.end());
        cur=pHead;
        int index=0;
        while(cur){
            if(ans[index++]!=cur->val)return false;
            cur=cur->next;
        }
        return true;
    }
};