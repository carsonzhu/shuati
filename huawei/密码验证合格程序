密码验证合格程序
描述：
密码要求:
1.长度超过8位
2.包括大小写字母.数字.其它符号,以上四种至少三种
3.不能有相同长度超2的子串重复
说明:长度超过2的子串

输入描述:
一组或多组长度超过2的子符串。每组占一行
输出描述:
如果符合要求输出：OK，否则输出NG

输入例子:
021Abc9000
021Abc9Abc1
021ABC9000
021$bc9000

输出例子:
OK
NG
NG
OK



代码如下：
//（c++）解法1:
#include <iostream>
#include <string>
using namespace std;

bool CheckPasswd(string str){
    int len=str.size();
    if(len <= 8) return false;
    
    int isLower=0,isUpper=0,isNum=0,isOther=0;
    int total=0;
    for(int i=0;i<len;i++){
        if(str[i] >= 'a' && str[i] <= 'z'){
            isLower=1;
        }
        else if(str[i] >= 'A' && str[i] <= 'Z'){
            isUpper=1;
        }
        else if(str[i] >= '0' && str[i] <= '9'){
            isNum=1;
        }else{
            isOther=1;
        }
        total=isLower+isUpper+isNum+isOther;
        if(total >= 3){
            break;
        }
    }
    if(total<3) return false;
    //查找相同子串时，使用了暴力解法，此处可改进
    int a,b,count=0;
    for(int i=0;i<len;++i){
        for(int j=i+1;j<len;++j){
            a=i;b=j;
            while(a<len && b<len && str[a]==str[b]){
                ++a;
                ++b;
                ++count;
                if(count >= 3) return false;
            }
            count=0;
        }
    }
    return true;
}

int main(){
    string str;
    bool res;
    while(getline(cin,str)){
        res=CheckPasswd(str);
        if(res)
            cout<<"OK"<<endl;
        else
            cout<<"NG"<<endl;
    }
    return 0;
}

改进版：利用string的特性
#include<iostream>
#include<string>
using namespace std;

bool check_class_num(string str)
{
    int lowerLetter = 0;
    int upperLetter = 0;
    int num = 0;
    int other = 0;
    for(string::iterator it =str.begin() ; it!=str.end();it++)
    {
        if( *it<='9' && *it>='0'){
            num = 1;
            continue;
        }
        else if(*it >='A' && *it<='Z'){
            upperLetter = 1;
            continue;
        }
        else if(*it >='a' && *it<='z'){
            lowerLetter = 1;
            continue;
        }
        else{
            other = 1;
            continue;
        }
    }
    if(other+lowerLetter+upperLetter+num >= 3)
        return true;
    else
        return false;
}

bool check_repeat(string str)
{
    bool flag = true;
    for(int i = 0; i<str.size()-2;i++){
        string sub1 = str.substr(i,3);
        if(str.find(sub1,i+3)!= string::npos)
            flag = false;
    }
    return flag;
}

int main()
{
    string password;
    while(getline(cin,password))
    {
        if(password.size()>=8 && check_class_num(password) && check_repeat(password))
            cout<<"OK"<<endl;
        else
            cout<<"NG"<<endl;
    }
    
    return 0;
}


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
//（java）解法2:利用正则表达式求解，代码简单易懂
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
	public static void main(String[] args) {
		Main ma = new Main();
		Scanner sc = new Scanner(System.in);
		while (sc.hasNext()) {
			String str = sc.nextLine();
			if (ma.isLengthQualified(str) && ma.isContentQualified(str) && !ma.hasDuplicatedString(str))
				System.out.println("OK");
			else
				System.out.println("NG");
		}
		sc.close();
	}

	public boolean isLengthQualified(String s) {
		return s.length() > 8;
	}

	public boolean isContentQualified(String s) {
		int count = 0;
		String[] str = { "[a-z]", "[A-Z]", "[0-9]", "[^a-zA-Z0-9]" };
		for (int i = 0; i < str.length; i++) {
			Pattern p = Pattern.compile(str[i]);
			Matcher m = p.matcher(s);
			if (m.find())
				count++;
		}
		return count >= 3;

	}

	public boolean hasDuplicatedString(String s) {
		for (int i = 0; i < s.length() - 3; i++) {
			if (s.substring(i + 3).contains(s.substring(i, i + 3)))
				return true;
		}
		return false;
	}
}

－－－－－－－－－－－－－－－－－－－－
//(java)解法3:再来看一个使用正则表达式的解法,很强大有木有
import java.util.*;
import java.util.regex.*;
public class Main{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    while(sc.hasNext()){
      String str=sc.nextLine();
      String result=lengthCheck(str)&&contentCheck(str)&&substrCheck(str)==true?"OK":"NG";
      System.out.println(result);
    }
    sc.close();
  }
  public static boolean lengthCheck(String str){//验证是否满足条件I
    return str.length()>8;
  }
  public static boolean contentCheck(String str){//验证是否满足条件II
    String []regex={"[a-z]","[A-Z]","\\d","[^a-zA-Z0-9]"};
    int count=0;
    for(int i=0;i<4;i++){
      Pattern p=Pattern.compile(regex[i]);
      Matcher m=p.matcher(str);
      if(m.find())
        count++;
    }
    return count>=3?true:false;
  }
  public static boolean substrCheck(String str){//验证是否满足条件III
    return !str.matches(".*(...)(.*\\1).*");
  }
}